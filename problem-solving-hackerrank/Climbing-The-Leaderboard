using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Result
{

    /*
     * Complete the 'climbingLeaderboard' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts following parameters:
     *  1. INTEGER_ARRAY ranked
     *  2. INTEGER_ARRAY player
     */

    public static List<int> climbingLeaderboard(List<int> ranked, List<int> player)
    {
        List<int> result = new List<int>();
        List<int> nodupesRanked = ranked.Distinct().ToList();
        List<NumberRank> numberrank = nodupesRanked.OrderByDescending(n => n)
            .Select((n, i) => new NumberRank(n, i + 1)).ToList();

       
        for (int i = 0; i < player.Count; i++)
        {
            var repeater = 0;
            foreach (var item in numberrank)
            {
                if (player[i] == item.Number)
                {
                    result.Add(item.Rank);
                    break;
                }
                else if (player[i] > item.Number)
                {
                    result.Add(item.Rank);
                    break;
                }
                repeater++;
            }
            if (repeater == numberrank.Count)
            {
                result.Add(numberrank.Count + 1);
            }
        }
        //foreach (var item in numberrank) -> to see ranking
        //{
        //    Console.WriteLine("{0} : {1}", item.Rank, item.Number);
        //}
        

        return result;
    }
}
class NumberRank
{
    public int Number { get; set; }
    public int Rank { get; set; }

    public NumberRank(int number, int rank)
    {
        Number = number;
        Rank = rank;
    }
}

class Solution
{
    public static void Main(string[] args)
    {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int rankedCount = Convert.ToInt32(Console.ReadLine().Trim());

        List<int> ranked = Console.ReadLine().TrimEnd().Split(' ').ToList().Select(rankedTemp => Convert.ToInt32(rankedTemp)).ToList();

        int playerCount = Convert.ToInt32(Console.ReadLine().Trim());

        List<int> player = Console.ReadLine().TrimEnd().Split(' ').ToList().Select(playerTemp => Convert.ToInt32(playerTemp)).ToList();

        List<int> result = Result.climbingLeaderboard(ranked, player);

        textWriter.WriteLine(String.Join("\n", result));

        textWriter.Flush();
        textWriter.Close();
    }
}
