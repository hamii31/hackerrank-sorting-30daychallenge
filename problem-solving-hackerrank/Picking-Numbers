class Result
{

    /*
     * Complete the 'pickingNumbers' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts INTEGER_ARRAY a as parameter.
     */

     public static int pickingNumbers(List<int> a)
    {
        var subArr = new Stack<int>();
        var maxLength = subArr.Count;
        for (int i = 0; i < a.Count; i++)
        {
            subArr.Push(a[i]);
            for (int j = i; j < a.Count - 1; j++)
            {
                if (subArr.Peek() - a[j + 1] <= 1 || subArr.Peek() - a[j + 1] <= -1)
                {
                    if (Addable(subArr, a[j + 1]))
                    {
                        subArr.Push(a[j + 1]);
                    }
                }
            }
            if (subArr.Count > maxLength)
            {
                maxLength = subArr.Count;
            }

            subArr.Clear();
        }
        
        return maxLength;
    }
    static bool Addable(Stack<int> a, int b)
    {
        var addable = false;
        var stackList = a.ToList();

        for (int n = 0; n < a.Count; n++)
        {
            if (stackList[n] - b > 1 || stackList[n] - b < -1)
            {
                addable = false;
                break;
            }
            else
            {
                addable = true;
            }
        }
        stackList.Clear();
        return addable;
    }


}

class Solution
{
    public static void Main(string[] args)
    {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int n = Convert.ToInt32(Console.ReadLine().Trim());

        List<int> a = Console.ReadLine().TrimEnd().Split(' ').ToList().Select(aTemp => Convert.ToInt32(aTemp)).ToList();

        int result = Result.pickingNumbers(a);

        textWriter.WriteLine(result);

        textWriter.Flush();
        textWriter.Close();
    }
}
