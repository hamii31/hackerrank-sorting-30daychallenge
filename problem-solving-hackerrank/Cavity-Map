using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Result
{

    /*
     * Complete the 'cavityMap' function below.
     *
     * The function is expected to return a STRING_ARRAY.
     * The function accepts STRING_ARRAY grid as parameter.
     */

    public static List<string> cavityMap(List<string> grid)
    {
        var size = grid.Count;
        var matrix = new char[size, size];
        for (int r = 0; r < matrix.GetLength(0); r++)
        {
            for (int c = 0; c < matrix.GetLength(1); c++)
            {
                matrix[r, c] = grid[r][c];
            }
        }
        grid.Clear();
        for (int i = 0; i < matrix.GetLength(0); i++)
        {
            for (int j = 0; j< matrix.GetLength(1); j++)
            {
                if ((i > 0 && i < size - 1) && (j > 0 && j < size - 1))
                {
                    var num = matrix[i, j];
                    if (matrix[i - 1, j] < num && matrix[i, j - 1] < num && matrix[i, j + 1] < num && matrix[i + 1, j] < num)
                    {
                        matrix[i, j] = 'X';
                    }
                }
            }
        }
        for (int r = 0; r < matrix.GetLength(0); r++)
        {
            var line = string.Empty;
            for (int c = 0; c < matrix.GetLength(1); c++)
            {
                line += matrix[r, c];
            }
            grid.Add(line);
        }
        return grid;
    }

}

class Solution
{
    public static void Main(string[] args)
    {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int n = Convert.ToInt32(Console.ReadLine().Trim());

        List<string> grid = new List<string>();

        for (int i = 0; i < n; i++)
        {
            string gridItem = Console.ReadLine();
            grid.Add(gridItem);
        }

        List<string> result = Result.cavityMap(grid);

        textWriter.WriteLine(String.Join("\n", result));

        textWriter.Flush();
        textWriter.Close();
    }
}
