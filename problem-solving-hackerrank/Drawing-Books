using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Result
{

    /*
     * Complete the 'pageCount' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER n
     *  2. INTEGER p
     */

    public static int pageCount(int n, int p)
    {
        var countA = 0;
        var countB = 0;
        if (p + 1 == n  && n % 2 != 0 || p - 1 == n && n % 2 != 0)
        {
            return countA;
        }
        if (p + 1 == n && n % 2 == 0 || p - 1 == n && n % 2 == 0)
        {
            return 1;
        }
        else if (p == n)
        {
            return countA;
        }
        else if (p == 1)
        {
            return countA;
        }
        for (int i = 1; i <= p; i+= 2)
        {
            if (i + 1 == p && p % 2 != 0)
            {
                break;
            }
            if (i == 1 && i + 1 != p)
            {
                countA = 0;
            }
            else
            {
                countA++;
            }
        }
        for (int i = n; i >= p; i-= 2)
        {
            if (i == n)
            {
                countB = 0;
            }
            else
            {
                countB++;
            }
        }
        if (countA > countB)
        {
            return countB;
        }
        else
        {
            return countA;
        }
    }

}

class Solution
{
    public static void Main(string[] args)
    {
        int n = Convert.ToInt32(Console.ReadLine().Trim());

        int p = Convert.ToInt32(Console.ReadLine().Trim());

        int result = Result.pageCount(n, p);

        Console.WriteLine(result);

        
    }
}
