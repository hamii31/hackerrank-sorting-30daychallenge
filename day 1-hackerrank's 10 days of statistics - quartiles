using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Result
{

    /*
     * Complete the 'quartiles' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts INTEGER_ARRAY arr as parameter.
     */

    public static void quartiles(int[] arr, int n)
    {
        Array.Sort(arr);
        var quartiles = new List<int>();
        var Q1 = 0;
        var Q2 = 0;
        var Q3 = 0;
        var quartile1 = new List<int>();
        var quartile3 = new List<int>();
        int sum = 0;
        if (n % 2 != 0) // if n is odd
        {
            Q2 = arr[n / 2]; // Q2 is the number in the middle of arr
            arr = arr.Where(val => val != Q2).ToArray();
            for (int i = 0; i < arr.Length/2; i++) // find Q1
            {
                quartile1.Add(arr[i]);
            }
            if (quartile1.Count % 2 == 0)
            {
                int skip = (quartile1.Count / 2) - 1;
                var middle = quartile1.Skip(skip).Take(2).ToArray();
                foreach (var item in middle)
                {
                    sum += item;
                }
                Q1 = sum / 2;
                sum = 0;
            }
            else
            { 
                Q1 = quartile1[quartile1.Count / 2];
                sum = 0;
            }
            for (int i = arr.Length - 1; i >= arr.Length/2; i--) // find Q3
            {
                quartile3.Add(arr[i]);
            }
            if (quartile3.Count % 2 == 0)
            {
                int skip = (quartile3.Count / 2);
                var middle = quartile3.Skip(skip - 1).Take(2).ToArray();
                foreach (var item in middle)
                {
                    sum += item;
                }
                Q3 = sum / 2;
                sum = 0;
            }
            else
            {
                Q3 = quartile3[quartile3.Count / 2];
                sum = 0;
            }
            quartiles.Add(Q1);
            quartiles.Add(Q2);
            quartiles.Add(Q3);
            foreach (var item in quartiles)
            {
                Console.WriteLine(item);
            }
        }
        else
        {
            for (int i = 0; i < n / 2; i++) 
            {
                quartile1.Add(arr[i]);
            }
            if (quartile1.Count % 2 == 0)
            {
                int skip1 = (quartile1.Count / 2) - 1;
                var middle1 = quartile1.Skip(skip1).Take(2).ToArray();
                foreach (var item in middle1)
                {
                    sum += item;
                }
                Q1 = sum / 2;
                sum = 0;
            }
            else
            {
                Q1 = quartile1[quartile1.Count / 2];
            }
            int skip = (n / 2) - 1;
            var middle = arr.Skip(skip).Take(2).ToArray();
            foreach (var item in middle)
            {
                sum += item;
            }
            Q2 = sum / 2;
            sum = 0;
            for (int i = n - 1; i >= n / 2; i--)
            {
                quartile3.Add(arr[i]);
            }
            if (quartile3.Count % 2 == 0)
            {
                skip = (quartile3.Count / 2) - 1;
                middle = quartile3.Skip(skip).Take(2).ToArray();
                foreach (var item in middle)
                {
                    sum += item;
                }
                Q3 = sum / 2;
                sum = 0;
            }
            else
            {
                Q3 = quartile3[quartile3.Count / 2];
            }
            quartiles.Add(Q1);
            quartiles.Add(Q2);
            quartiles.Add(Q3);
            foreach (var item in quartiles)
            {
                Console.WriteLine(item);
            }
        }
       
    }

}

class Solution
{
    public static void Main(string[] args)
    {
        int n = int.Parse(Console.ReadLine());
        var arr = new int[n];
        arr = Console.ReadLine().Split(' ').Select(int.Parse).ToArray();
        Result.quartiles(arr, n);
    }
}
